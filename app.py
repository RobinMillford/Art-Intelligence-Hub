import streamlit as st
import tensorflow as tf
from PIL import Image
import numpy as np
import os
import cv2
import pandas as pd

# --- App Configuration ---
st.set_page_config(
    page_title="Art Intelligence Hub",
    page_icon="ðŸŽ¨",
    layout="wide"
)

# --- Model Paths ---
MODELS_DIR = 'models'
AI_VS_REAL_MODEL_PATH = os.path.join(MODELS_DIR, 'MobileNetV2_finetuned_model(0.95 loss 0.11).keras')
EFFNET_MODEL_PATH = os.path.join(MODELS_DIR, 'best_art_model_effnetv2_b2.keras')
CONVNEXT_MODEL_PATH = os.path.join(MODELS_DIR, 'best_art_model_convnext_base.keras')

# --- Class Names ---
STYLE_CLASS_NAMES = sorted([
    'art_nouveau', 'baroque', 'expressionism', 'impressionism',
    'post_impressionism', 'realism', 'renaissance', 'romanticism',
    'surrealism', 'ukiyo_e'
])
AI_REAL_CLASS_NAMES = ['AI Art', 'Real Art']

# --- Load CSS Styling ---
def load_css():
    st.markdown("""<style>
        .stApp { background-color: #1A202C; }
        .st-emotion-cache-18ni7ap, .st-emotion-cache-10trblm {
            background-color: #2D3748; border-radius: 1rem; padding: 2.5rem;
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
            border: 1px solid #4A5568;
        }
        [data-testid="stSidebar"] { background-color: #2D3748; border-right: 1px solid #4A5568; }
        h1, h2, h3 { color: #E2E8F0; }
        .stButton>button {
            border-radius: 0.5rem; padding: 0.75rem 1.5rem;
            font-weight: 600; background-image: linear-gradient(to right, #4f46e5, #818cf8);
            color: white; border: none;
        }
        .result-box {
            border-radius: 0.75rem; padding: 1.5rem; margin-top: 1rem;
            text-align: center; animation: fadeIn 0.5s ease-in-out;
        }
        .success { background-color: #064E3B; border: 1px solid #34D399; }
        .error { background-color: #7F1D1D; border: 1px solid #F87171; }
        .success h3, .success p { color: #A7F3D0; }
        .error h3, .error p { color: #FECACA; }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>""", unsafe_allow_html=True)

# --- Model Loader ---
@st.cache_resource
def load_all_models():
    models = {'ai_vs_real': None, 'effnet': None, 'convnext': None}

    def _load_single_model(model_key, path, name):
        if os.path.exists(path):
            try:
                models[model_key] = tf.keras.models.load_model(path)
                st.sidebar.success(f"{name} model loaded.")
            except Exception as e:
                st.sidebar.error(f"Error loading {name} model: {e}")
        else:
            st.sidebar.error(f"{name} model not found at '{path}'")

    _load_single_model('ai_vs_real', AI_VS_REAL_MODEL_PATH, "Artwork Authenticity")
    _load_single_model('effnet', EFFNET_MODEL_PATH, "EfficientNetV2")
    _load_single_model('convnext', CONVNEXT_MODEL_PATH, "ConvNeXt")

    return models

# --- Grad-CAM Heatmap Overlay ---
def overlay_heatmap(img, heatmap, alpha=0.5):
    if heatmap is None:
        return np.array(img)
    img_bgr = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
    heatmap_resized = cv2.resize(heatmap, (img_bgr.shape[1], img_bgr.shape[0]))
    heatmap_uint8 = np.uint8(255 * heatmap_resized)
    heatmap_color = cv2.applyColorMap(heatmap_uint8, cv2.COLORMAP_VIRIDIS)
    superimposed_img = cv2.addWeighted(img_bgr, 1 - alpha, heatmap_color, alpha, 0)
    return cv2.cvtColor(superimposed_img, cv2.COLOR_BGR2RGB)

# --- Page 1: Artwork Authenticity ---
def page_artwork_authenticity(model):
    st.header("Artwork Authenticity Classifier")
    st.markdown("Upload an image to determine if it was created by a human or generated by AI.")

    def preprocess(image):
        img = image.resize((224, 224)).convert('RGB')
        arr = tf.keras.preprocessing.image.img_to_array(img)
        return np.expand_dims(arr, axis=0) / 255.0

    def generate_gradcam(img_array):
        grad_model = tf.keras.models.Model([model.inputs], [model.get_layer("out_relu").output, model.output])
        with tf.GradientTape() as tape:
            conv_outputs, predictions = grad_model(img_array)
            class_channel = predictions[0]
        grads = tape.gradient(class_channel, conv_outputs)
        pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))
        heatmap = conv_outputs[0] @ pooled_grads[..., tf.newaxis]
        heatmap = tf.squeeze(heatmap)
        return np.maximum(heatmap, 0) / (np.max(heatmap) + 1e-8)

    uploaded_file = st.file_uploader("Upload an artwork", type=["jpg", "jpeg", "png"], key="auth")
    if uploaded_file:
        image = Image.open(uploaded_file)
        with st.spinner("Analyzing..."):
            processed = preprocess(image)
            prediction = model.predict(processed)
            class_idx = int(np.round(prediction[0][0]))
            label = AI_REAL_CLASS_NAMES[class_idx]
            confidence = (prediction[0][0] if class_idx == 1 else 1 - prediction[0][0]) * 100
            heatmap = generate_gradcam(processed)
            overlay_img = overlay_heatmap(image, heatmap)

        col1, col2 = st.columns(2)
        col1.image(image, caption="Original", use_container_width=True)
        col2.image(overlay_img, caption="Grad-CAM", use_container_width=True)

        if label == "Real Art":
            st.markdown(f'<div class="result-box success"><h3>Prediction: Real Art</h3><p>Confidence: {confidence:.2f}%</p></div>', unsafe_allow_html=True)
        else:
            st.markdown(f'<div class="result-box error"><h3>Prediction: AI Art</h3><p>Confidence: {confidence:.2f}%</p></div>', unsafe_allow_html=True)

# --- Page 2: Art Style Ensemble Classifier ---
def page_art_style(effnet_model, convnext_model):
    st.header("Art Style Ensemble Classifier")

    def preprocess_effnet(image):
        img = image.resize((260, 260)).convert("RGB")
        return tf.keras.applications.efficientnet_v2.preprocess_input(np.expand_dims(np.array(img), axis=0))

    def preprocess_convnext(image):
        img = image.resize((224, 224)).convert("RGB")
        return tf.keras.applications.convnext.preprocess_input(np.expand_dims(np.array(img), axis=0))

    uploaded_file = st.file_uploader("Upload an artwork", type=["jpg", "jpeg", "png"], key="style")
    if uploaded_file:
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Artwork", use_container_width=True)

        try:
            with st.spinner("Analyzing..."):
                pred_effnet = effnet_model.predict(preprocess_effnet(image))[0]
                pred_convnext = convnext_model.predict(preprocess_convnext(image))[0]
                ensemble = (pred_effnet + pred_convnext) / 2.0
                idx = np.argmax(ensemble)
                confidence = np.max(ensemble) * 100
                style = STYLE_CLASS_NAMES[idx].replace('_', ' ').title()

            st.subheader("Final Verdict (Ensemble)")
            st.markdown(f'<div class="result-box success"><h3>Style: {style}</h3><p>Confidence: {confidence:.2f}%</p></div>', unsafe_allow_html=True)
            st.progress(int(confidence))

            with st.expander("Show Individual Model Predictions"):
                def get_top(preds, k=3):
                    top_idx = preds.argsort()[-k:][::-1]
                    return pd.DataFrame({
                        "Style": [STYLE_CLASS_NAMES[i].replace('_', ' ').title() for i in top_idx],
                        "Confidence": preds[top_idx] * 100
                    })

                col1, col2 = st.columns(2)
                col1.subheader("EfficientNetV2")
                col1.bar_chart(get_top(pred_effnet), x="Style", y="Confidence")
                col2.subheader("ConvNeXt")
                col2.bar_chart(get_top(pred_convnext), x="Style", y="Confidence")

        except Exception as e:
            st.error(f"Prediction failed: {e}")

# --- Main Logic ---
def main():
    load_css()
    models = load_all_models()
    st.sidebar.title("ðŸŽ¨ Art Intelligence Hub")
    st.sidebar.markdown("---")

    if 'page' not in st.session_state:
        st.session_state.page = "Artwork Authenticity"

    if st.sidebar.button("Artwork Authenticity", use_container_width=True):
        st.session_state.page = "Artwork Authenticity"
    if st.sidebar.button("Art Style Classifier", use_container_width=True):
        st.session_state.page = "Art Style Classifier"

    st.sidebar.markdown("---")
    st.sidebar.info("Upload an image to begin analyzing artwork using deep learning.")

    if st.session_state.page == "Artwork Authenticity":
        if models['ai_vs_real']:
            page_artwork_authenticity(models['ai_vs_real'])
        else:
            st.error("Artwork Authenticity model not available.")
    elif st.session_state.page == "Art Style Classifier":
        if models['effnet'] is not None and models['convnext'] is not None:
            page_art_style(models['effnet'], models['convnext'])
        else:
            st.error("One or both style classifier models are missing.")

if __name__ == "__main__":
    main()